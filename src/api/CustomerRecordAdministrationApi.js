/**
 * TFNR APIs
 * # Introduction  This document describes the new SMS/800 Toll-Free Number (TFN) Registry APIs exposed to all Responsible Organization (Resp Org) users requiring to access the SMS/800 TFN Registry via APIs.  The SMS/800 TFN Registry Application Program Interfaces (APIs) follow a standard RESTful model using the Richardson Maturity Model level 1 approach with the standard HTTP verbs @GET, @POST, @PUT, @DELETE to represent the CRUD operations against the defined resources. The PUT verb is used for full and partial updates, POST for creates, GET for reads, and DELETE for deletes.  # Authentication  SMS/800 Toll-Free Number (TFN) Registry APIs requires access tokens to invoke business API end points. The access token can be obtained in two different ways, using the industry standard OAuth 2.0 password grant flow or by invoking an [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api.  # OAuth 2.0   TFNR APIS support industry standard OAuth 2.0 authentication and authorization for accessing the APIs. The API server supports password grant for obtaining the access tokens which are valid for 60 minutes and refresh grant for refreshing/using the access tokens beyond the initial 60 minutes.    The following endpoints can be used for invoking the OAuth 2.0 functionalities.    Production: https://api-tfnregistry.somos.com/token    Sandbox: https://api-devp-tfnregistry.somos.com/token    To use OAuth 2.0 password grant flow, you will be required to provide four values, user-name, password, clientKey and clienkSecret. You can get the clientKey and clientSecret by invoking the [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api. You are required to invoke this only once to obtain the keys.  Never share your secret keys. Keep them guarded and secure.   Access Tokens have an expiration period of 60 minutes and needs to be refreshed using the refresh grant type of OAuth2.0 standards.    /token api can be used for both password and refresh grants. To obtain the accesstoken for the first time, the following information needs to be posted as part of the body   ```json  grant_type=password&username={logonid}&password={pass}  ```  ```json  grant_type=refresh_token&refresh_token={retoken}  ```   and the header should include the following information   ```json  Authorization : Basic (base64 encoded  clientKey:clientSecret) ```  both the password grant and refresh grant returns the following json body   ```json  {    \"scope\":\"default\",    \"token_type\":\"Bearer\",    \"expires_in\":3600,    \"refresh_token\":\"ca5a51f18b2edf4eaa9e4b871e42b58a\",    \"access_token\":\"f2c66f146278aaaf6513b585b5b68d1d\" } ``` # Invoking APIS    It is IMPORTANT to note that, at this time SMS/800 Toll-Free Number (TFN) Registry APIs only supports one active session for any given user name for all channels (WBA, TFNR Application and Enhanced Platform). If the user tries to open multiple sessions, the previous session will be automatically terminated.  Also, at this time APIs do not support parallel requests due to the limitation of the existing system. So, users should only send one request at a time and wait till the response is returned by the server. If the backed server returns a 202 with a RequestId, the user should NOT submit another request till the user does the polling and obtain the response of the previous request.    # Polling    Some of the TFNR APIs when invoked has the possibility of exceeding the defined timeout for a synchronous call, and so there is a possibility that the apis will return a HTTP 202 code with a RequestId that a client will use to poll for a response. This is common for search and reserve APIs and users are responsible to capture the RequestId and use the APIs provided to do the polling and obtain the actual response of the api invocation. In certain cases when the users do the polling, they might get a 202 again if the request is still being processed, in this case the user is required to wait for few seconds and do the polling till he gets the final response back from the server.    # Throttling    Users will be throttled at the RespOrg Level with a rate limit of 12000 requests/minute per RespOrg in Production and 3000 requests/minute per RespOrg in Developer Portal environment.
 *
 * OpenAPI spec version: v1
 * Contact: productsupport@somos.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomerRecordQueryResponse from '../model/CustomerRecordQueryResponse';
import DisconnectCustomerRequest from '../model/DisconnectCustomerRequest';
import DisconnectCustomerResponse from '../model/DisconnectCustomerResponse';
import RecordCopyRequest from '../model/RecordCopyRequest';
import RecordCopyResponse from '../model/RecordCopyResponse';
import RecordCopyUpdateRequest from '../model/RecordCopyUpdateRequest';
import RecordCopyUpdateResponse from '../model/RecordCopyUpdateResponse';
import RecordCreateRequest from '../model/RecordCreateRequest';
import RecordCreateResponse from '../model/RecordCreateResponse';
import RecordDeleteRequest from '../model/RecordDeleteRequest';
import RecordDeleteResponse from '../model/RecordDeleteResponse';
import RecordDisconnectUpdateRequest from '../model/RecordDisconnectUpdateRequest';
import RecordDisconnectUpdateResponse from '../model/RecordDisconnectUpdateResponse';
import RecordRetrieveResponse from '../model/RecordRetrieveResponse';
import RecordTransferRequest from '../model/RecordTransferRequest';
import RecordTransferResponse from '../model/RecordTransferResponse';
import RecordTransferUpdateRequest from '../model/RecordTransferUpdateRequest';
import RecordTransferUpdateResponse from '../model/RecordTransferUpdateResponse';
import RecordUpdateRequest from '../model/RecordUpdateRequest';
import RecordUpdateResponse from '../model/RecordUpdateResponse';
import TimeoutResponse from '../model/TimeoutResponse';

/**
* CustomerRecordAdministration service.
* @module api/CustomerRecordAdministrationApi
* @version v1
*/
export default class CustomerRecordAdministrationApi {

    /**
    * Constructs a new CustomerRecordAdministrationApi. 
    * @alias module:api/CustomerRecordAdministrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the customerRecordCopy operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordCopyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Copy
     * The request is meant to allow for a copy a customer record to allow for a future effective data or now or different sections(such as CAD/LAD/CPR) to another dial number. Note that the flags for whether or not to copy specific areas will be applied to only copy what is requested. The flags will determine if the sections of data they are associated with will be copied. Also note, if tgtNum(target) is different than the num(Source),then tgtNum should be in working or assigned status.
     * @param {String} authorization Bearer access_token
     * @param {module:model/RecordCopyRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordCopyResponse}
     */
    customerRecordCopy(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordCopy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordCopy");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordCopyResponse;

      return this.apiClient.callApi(
        '/cus/record/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordCopyByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordCopyByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordCopyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Copy - Sync Timeout
     * This API is used if /cus/record/copy api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordCopyByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordCopyResponse}
     */
    customerRecordCopyByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordCopyByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordCopyByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordCopyResponse;

      return this.apiClient.callApi(
        '/cus/record/copy/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordCopyUpdate operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordCopyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordCopyUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Copy Update
     * This API is used to complete the copy, by updating the record. Before calling this API, it is recommended to invoke /cus/record/copy, and create a copy record. This API has anyOf parameters: suppFormNum or svcOrderNum and interLTCar or intraLTCar.
     * @param {String} authorization Bearer access_token
     * @param {module:model/RecordCopyUpdateRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordCopyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordCopyUpdateResponse}
     */
    customerRecordCopyUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordCopyUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordCopyUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordCopyUpdateResponse;

      return this.apiClient.callApi(
        '/cus/record/copyUpdate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordCopyUpdateByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordCopyUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordCopyUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Copy Update - Sync Timeout
     * This API is used if /cus/record/copyUpdate api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordCopyUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordCopyUpdateResponse}
     */
    customerRecordCopyUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordCopyUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordCopyUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordCopyUpdateResponse;

      return this.apiClient.callApi(
        '/cus/record/copyUpdate/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordCreate operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Create 
     * This API is used to create a customer record. This API has anyOf parameters: suppFormNum or svcOrderNum and interLTCar or intraLTCar. This API should not be used for activating a number in DISCONNECT status, instead use /cus/record/copyUpdate.
     * @param {String} authorization Bearer access_token
     * @param {module:model/RecordCreateRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordCreateResponse}
     */
    customerRecordCreate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordCreate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordCreateResponse;

      return this.apiClient.callApi(
        '/cus/record/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordCreateByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordCreateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Create - Sync Timeout
     * This API is used if /cus/record/create api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordCreateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordCreateResponse}
     */
    customerRecordCreateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordCreateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordCreateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordCreateResponse;

      return this.apiClient.callApi(
        '/cus/record/create/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordDelete operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Delete
     * This API will allow the user to delete an existing Customer Record for the provided effective date and time.
     * @param {String} authorization Bearer access_token
     * @param {module:model/RecordDeleteRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDeleteResponse}
     */
    customerRecordDelete(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordDelete");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordDelete");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordDeleteResponse;

      return this.apiClient.callApi(
        '/cus/record/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordDeleteByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordDeleteByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Delete - Sync Timeout
     * This API is used if /cus/record/delete api returns a HTTP 202 with a RequestID in the pay load. Please see the section Polling for more information on how to do the polling. 
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordDeleteByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDeleteResponse}
     */
    customerRecordDeleteByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordDeleteByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordDeleteByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordDeleteResponse;

      return this.apiClient.callApi(
        '/cus/record/delete/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordDisconnect operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordDisconnectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisconnectCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Disconnect
     * This API is used to create a Disconnect Record for the effective date and time. This API has anyOf parameters: suppFormNum or svcOrderNum and interLTCar or intraLTCar.
     * @param {String} authorization Bearer access_token
     * @param {module:model/DisconnectCustomerRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordDisconnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisconnectCustomerResponse}
     */
    customerRecordDisconnect(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordDisconnect");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordDisconnect");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisconnectCustomerResponse;

      return this.apiClient.callApi(
        '/cus/record/disconnect', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordDisconnectByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordDisconnectByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisconnectCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Disconnect - Sync Timeout
     * This API is used if /cus/record/disconnect api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordDisconnectByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisconnectCustomerResponse}
     */
    customerRecordDisconnectByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordDisconnectByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordDisconnectByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisconnectCustomerResponse;

      return this.apiClient.callApi(
        '/cus/record/disconnect/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordDisconnectUpdate operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordDisconnectUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDisconnectUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Disconnect Update
     * This API is used to update the Disconnect Record. This API has anyOf parameters: suppFormNum or svcOrderNum and interLTCar or intraLTCar.
     * @param {String} authorization Bearer access_token
     * @param {module:model/RecordDisconnectUpdateRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordDisconnectUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDisconnectUpdateResponse}
     */
    customerRecordDisconnectUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordDisconnectUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordDisconnectUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordDisconnectUpdateResponse;

      return this.apiClient.callApi(
        '/cus/record/disconnectUpdate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordDisconnectUpdateByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordDisconnectUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDisconnectUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Disconnect Update - Sync Timeout
     * This API is used if /cus/record/disconnectUpdate api returns a HTTP 202 with a RequestID in the pay load. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordDisconnectUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDisconnectUpdateResponse}
     */
    customerRecordDisconnectUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordDisconnectUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordDisconnectUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordDisconnectUpdateResponse;

      return this.apiClient.callApi(
        '/cus/record/disconnectUpdate/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordQuery operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerRecordQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Query
     * This API provides the capability to query for the status of a Customer Record (CR). This API is used for regular (standard) customer records. There are similar APIs for Pointer records and Template records. The state of a record in the TFN Registry is reflected by one of several possible status values that are automatically generated by the system. The values are shown in the response section. If no effective date and time is requested, the API will return up to 10 versions of the customer record. The version status data will be in increasing effective date and time sequence, beginning with the earliest version. If there are more than 10 versions, an indicator will be returned informing the API client that more versions exist. If an effective date without an effective time is requested, the response message will contain status information on up to 10 versions with effective dates equal to or greater than that specified. If more than 10 versions meet the criterion, an indicator will be returned informing the API client that more versions exist.If both an effective date and an effective time are specified, the response message will return the status information on up to 10 versions with effective dates and times equal to or greater than that specified. If more than 10 versions meet the criterion, an indicator will be returned informing the API client that more versions exist. If an effective date and/or effective time are specified, and all the versions in TFN Registry have earlier effective dates and times, the API will return the most recent versions, up to a maximum of 10 versions. If there are more than 10 versions of the number, an indicator will be returned informing the API client that more versions exist
     * @param {String} authorization Bearer access_token
     * @param {String} num Dialed number of the record
     * @param {Object} opts Optional parameters
     * @param {String} opts.effDtTime Effective date and time format in ISO 8601
     * @param {String} opts.reqId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerRecordQueryResponse}
     */
    customerRecordQuery(authorization, num, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordQuery");
      }

      // verify the required parameter 'num' is set
      if (num === undefined || num === null) {
        throw new Error("Missing the required parameter 'num' when calling customerRecordQuery");
      }


      let pathParams = {
      };
      let queryParams = {
        'num': num,
        'EffDtTime': opts['effDtTime'],
        'reqId': opts['reqId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerRecordQueryResponse;

      return this.apiClient.callApi(
        '/cus/record/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordTransfer operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Transfer
     * This API is used to transfer a customer record to a future effective date.
     * @param {String} authorization Bearer access_token
     * @param {module:model/RecordTransferRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordTransferResponse}
     */
    customerRecordTransfer(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordTransfer");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordTransfer");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordTransferResponse;

      return this.apiClient.callApi(
        '/cus/record/transfer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordTransferByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordTransferByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Transfer - Sync Timeout
     * This API is used if /cus/record/transfer api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordTransferByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordTransferResponse}
     */
    customerRecordTransferByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordTransferByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordTransferByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordTransferResponse;

      return this.apiClient.callApi(
        '/cus/record/transfer/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordTransferUpdate operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordTransferUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordTransferUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Transfer Update
     * This API is used to update a record to complete the transfer.  The Transfer update will allow for the change on the record post the transfer command. Before calling this API it is REQUIRED to invoke /cus/record/transfer, and create a transfer record.
     * @param {String} authorization Bearer access_token
     * @param {module:model/RecordTransferUpdateRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordTransferUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordTransferUpdateResponse}
     */
    customerRecordTransferUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordTransferUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordTransferUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordTransferUpdateResponse;

      return this.apiClient.callApi(
        '/cus/record/transferUpdate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordTransferUpdateByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordTransferUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordTransferUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Transfer Update - Sync Timeout
     * This API is used if /cus/record/transferUpdate api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling. This API has anyOf parameters: suppFormNum or svcOrderNum and interLTCar or intraLTCar.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordTransferUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordTransferUpdateResponse}
     */
    customerRecordTransferUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordTransferUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordTransferUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordTransferUpdateResponse;

      return this.apiClient.callApi(
        '/cus/record/transferUpdate/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordUpdate operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Update
     * This API is used to update a Customer Record for a dial number. This API has anyOf parameters: suppFormNum or svcOrderNum and interLTCar or intraLTCar.
     * @param {String} authorization Bearer access_token
     * @param {module:model/RecordUpdateRequest} body 
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordUpdateResponse}
     */
    customerRecordUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customerRecordUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordUpdateResponse;

      return this.apiClient.callApi(
        '/cus/record/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordUpdateByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record Update - Sync Timeout
     * This API is used if /cus/record/update api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordUpdateResponse}
     */
    customerRecordUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordUpdateResponse;

      return this.apiClient.callApi(
        '/cus/record/update/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordView operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordRetrieveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record View
     * This API is used to retrieve a list of possible records based on the number provided, and optional effective date time.
     * @param {String} authorization Bearer access_token
     * @param {String} num dialed Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.effDtTm Effective date and time
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordRetrieveResponse}
     */
    customerRecordView(authorization, num, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordView");
      }

      // verify the required parameter 'num' is set
      if (num === undefined || num === null) {
        throw new Error("Missing the required parameter 'num' when calling customerRecordView");
      }


      let pathParams = {
      };
      let queryParams = {
        'num': num,
        'effDtTm': opts['effDtTm']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordRetrieveResponse;

      return this.apiClient.callApi(
        '/cus/record/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerRecordViewByRequestId operation.
     * @callback module:api/CustomerRecordAdministrationApi~customerRecordViewByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordRetrieveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Record View - Sync Timeout
     * This API is used if /cus/record/view api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/CustomerRecordAdministrationApi~customerRecordViewByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordRetrieveResponse}
     */
    customerRecordViewByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling customerRecordViewByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling customerRecordViewByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordRetrieveResponse;

      return this.apiClient.callApi(
        '/cus/record/view/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
