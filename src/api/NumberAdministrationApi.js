/**
 * TFNR APIs
 * # Introduction  This document describes the new SMS/800 Toll-Free Number (TFN) Registry APIs exposed to all Responsible Organization (Resp Org) users requiring to access the SMS/800 TFN Registry via APIs.  The SMS/800 TFN Registry Application Program Interfaces (APIs) follow a standard RESTful model using the Richardson Maturity Model level 1 approach with the standard HTTP verbs @GET, @POST, @PUT, @DELETE to represent the CRUD operations against the defined resources. The PUT verb is used for full and partial updates, POST for creates, GET for reads, and DELETE for deletes.  # Authentication  SMS/800 Toll-Free Number (TFN) Registry APIs requires access tokens to invoke business API end points. The access token can be obtained in two different ways, using the industry standard OAuth 2.0 password grant flow or by invoking an [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api.  # OAuth 2.0   TFNR APIS support industry standard OAuth 2.0 authentication and authorization for accessing the APIs. The API server supports password grant for obtaining the access tokens which are valid for 60 minutes and refresh grant for refreshing/using the access tokens beyond the initial 60 minutes.    The following endpoints can be used for invoking the OAuth 2.0 functionalities.    Production: https://api-tfnregistry.somos.com/token    Sandbox: https://api-devp-tfnregistry.somos.com/token    To use OAuth 2.0 password grant flow, you will be required to provide four values, user-name, password, clientKey and clienkSecret. You can get the clientKey and clientSecret by invoking the [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api. You are required to invoke this only once to obtain the keys.  Never share your secret keys. Keep them guarded and secure.   Access Tokens have an expiration period of 60 minutes and needs to be refreshed using the refresh grant type of OAuth2.0 standards.    /token api can be used for both password and refresh grants. To obtain the accesstoken for the first time, the following information needs to be posted as part of the body   ```json  grant_type=password&username={logonid}&password={pass}  ```  ```json  grant_type=refresh_token&refresh_token={retoken}  ```   and the header should include the following information   ```json  Authorization : Basic (base64 encoded  clientKey:clientSecret) ```  both the password grant and refresh grant returns the following json body   ```json  {    \"scope\":\"default\",    \"token_type\":\"Bearer\",    \"expires_in\":3600,    \"refresh_token\":\"ca5a51f18b2edf4eaa9e4b871e42b58a\",    \"access_token\":\"f2c66f146278aaaf6513b585b5b68d1d\" } ``` # Invoking APIS    It is IMPORTANT to note that, at this time SMS/800 Toll-Free Number (TFN) Registry APIs only supports one active session for any given user name for all channels (WBA, TFNR Application and Enhanced Platform). If the user tries to open multiple sessions, the previous session will be automatically terminated.  Also, at this time APIs do not support parallel requests due to the limitation of the existing system. So, users should only send one request at a time and wait till the response is returned by the server. If the backed server returns a 202 with a RequestId, the user should NOT submit another request till the user does the polling and obtain the response of the previous request.    # Polling    Some of the TFNR APIs when invoked has the possibility of exceeding the defined timeout for a synchronous call, and so there is a possibility that the apis will return a HTTP 202 code with a RequestId that a client will use to poll for a response. This is common for search and reserve APIs and users are responsible to capture the RequestId and use the APIs provided to do the polling and obtain the actual response of the api invocation. In certain cases when the users do the polling, they might get a 202 again if the request is still being processed, in this case the user is required to wait for few seconds and do the polling till he gets the final response back from the server.    # Throttling    Users will be throttled at the RespOrg Level with a rate limit of 12000 requests/minute per RespOrg in Production and 3000 requests/minute per RespOrg in Developer Portal environment.
 *
 * OpenAPI spec version: v1
 * Contact: productsupport@somos.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NumberLimitsQueryResponse from '../model/NumberLimitsQueryResponse';
import NumberQueryResponse from '../model/NumberQueryResponse';
import NumberSearchRequest from '../model/NumberSearchRequest';
import NumberSearchReserveRequest from '../model/NumberSearchReserveRequest';
import NumberSearchReserveResponse from '../model/NumberSearchReserveResponse';
import NumberSearchResponse from '../model/NumberSearchResponse';
import NumberSpareRequest from '../model/NumberSpareRequest';
import NumberSpareResponse from '../model/NumberSpareResponse';
import NumberUpdateRequest from '../model/NumberUpdateRequest';
import NumberUpdateResponse from '../model/NumberUpdateResponse';
import OneClickActivateRequest from '../model/OneClickActivateRequest';
import OneClickActivateResponse from '../model/OneClickActivateResponse';
import TimeoutResponse from '../model/TimeoutResponse';
import TroubleNumberQueryResponse from '../model/TroubleNumberQueryResponse';

/**
* NumberAdministration service.
* @module api/NumberAdministrationApi
* @version v1
*/
export default class NumberAdministrationApi {

    /**
    * Constructs a new NumberAdministrationApi. 
    * @alias module:api/NumberAdministrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the numberLimitsQuery operation.
     * @callback module:api/NumberAdministrationApi~numberLimitsQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberLimitsQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reservation Limit Query
     * The limits resource shows the various settings around reservations. There are no input parameters to the query since they apply to the clients associated RespOrg.
     * @param {String} authorization Bearer access_token
     * @param {module:api/NumberAdministrationApi~numberLimitsQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberLimitsQueryResponse}
     */
    numberLimitsQuery(authorization, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberLimitsQuery");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberLimitsQueryResponse;

      return this.apiClient.callApi(
        '/num/limits/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberLimitsQueryByRequestId operation.
     * @callback module:api/NumberAdministrationApi~numberLimitsQueryByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberLimitsQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reservation Limit Query - Sync Timeout
     * This API is used if [/num/limits/query/](tag/Reservation-Limit-Query%2Fpaths%2F~1num~1limits~1query%2Fget) api returns a HTTP 202 with a RequestID in the payload. Please see the section [Polling](#section/Polling) for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/NumberAdministrationApi~numberLimitsQueryByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberLimitsQueryResponse}
     */
    numberLimitsQueryByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberLimitsQueryByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling numberLimitsQueryByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberLimitsQueryResponse;

      return this.apiClient.callApi(
        '/num/limits/query/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberOneClick operation.
     * @callback module:api/NumberAdministrationApi~numberOneClickCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OneClickActivateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * One Click Activate 
     * Using this API, user (Resp Org) can send in one click activate requests.
     * @param {String} authorization Bearer access_token
     * @param {module:model/OneClickActivateRequest} body 
     * @param {module:api/NumberAdministrationApi~numberOneClickCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OneClickActivateResponse}
     */
    numberOneClick(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberOneClick");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling numberOneClick");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OneClickActivateResponse;

      return this.apiClient.callApi(
        '/num/number/srchres/oneClick', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberOneClickbyRequestId operation.
     * @callback module:api/NumberAdministrationApi~numberOneClickbyRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OneClickActivateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * One Click Activate Polling 
     * This API is used if /num/number/srchres/oneClick api returns a HTTP 202 with a RequestID (and BlkId if requested quantity was greater than 10) in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/NumberAdministrationApi~numberOneClickbyRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OneClickActivateResponse}
     */
    numberOneClickbyRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberOneClickbyRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling numberOneClickbyRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OneClickActivateResponse;

      return this.apiClient.callApi(
        '/num/number/srchres/oneClick/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberQuery operation.
     * @callback module:api/NumberAdministrationApi~numberQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Query
     * This API is used to query the details for a specific number. Only one number can be requested at a time, to retrieve the status and ownership information.
     * @param {String} authorization Bearer access_token
     * @param {String} num Dial Number to be queried
     * @param {module:api/NumberAdministrationApi~numberQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberQueryResponse}
     */
    numberQuery(authorization, num, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberQuery");
      }

      // verify the required parameter 'num' is set
      if (num === undefined || num === null) {
        throw new Error("Missing the required parameter 'num' when calling numberQuery");
      }


      let pathParams = {
      };
      let queryParams = {
        'num': num
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberQueryResponse;

      return this.apiClient.callApi(
        '/num/number/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberQueryByRequestId operation.
     * @callback module:api/NumberAdministrationApi~numberQueryByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Query - Sync Timeout
     * This API is used if [/num/number/query](#tag/Number-Query%2Fpaths%2F~1num~1number~1query%2Fget) api returns a HTTP 202 with a RequestID in the payload. Please see the section [Polling](#section/Polling) for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/NumberAdministrationApi~numberQueryByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberQueryResponse}
     */
    numberQueryByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberQueryByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling numberQueryByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberQueryResponse;

      return this.apiClient.callApi(
        '/num/number/query/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberSearch operation.
     * @callback module:api/NumberAdministrationApi~numberSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Search
     * The search action will determine if a toll free number is available (spare) and if found, will place a temporary hold on any the number. The search function has the possibility of exceeding the defined timeout for a synchronous call, and so there is a possibility that a search will return a HTTP 202 code with a RequestId that a client will use to poll for a response. If no number, NXX, or STARTING LINE NUMBER parameters are provided, the TFNR system will invoke the random search function and look for the appropriate amount of spare numbers (with or without specified NPA). If a START NXX is specified, and no spare numbers are found in that NXX, the TFNR system will select numbers from the next open NXX in the specified NPA or in any NPA if no NPA is specified. If the TFNR system is unable to find the entire quantity of numbers requested, the system will return what it found and mark the response as a \&quot;partial completion\&quot;. If the TFNR system cannot find a number specified in the NUM parameter, then no number will be returned. Duplicate numbers and RCC numbers are no longer supported by the TFNR system. After doing a search and a number has been found to be spare, a pre-reservation lock is placed on it for a period defined around reservations. During the pre-reservation period, the number is protected and can only be reserved by the same RESP ORG that did the initial search. If the number has not been reserved by the RESP ORG that did the initial search, it becomes available to anyone. If the same RESP ORG or another RESP ORG queries or searches the same number before the pre-reservation time-out occurs, an error message is returned. If the RESP ORG that submitted the original search requests submits a reservation request after the pre-reservation period has expired, it may result in an error message if another user has a lock (pre-reservation or waiting) on it or has reserved it.
     * @param {String} authorization Bearer access_token
     * @param {module:model/NumberSearchRequest} body 
     * @param {module:api/NumberAdministrationApi~numberSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberSearchResponse}
     */
    numberSearch(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberSearch");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling numberSearch");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberSearchResponse;

      return this.apiClient.callApi(
        '/num/number/search', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberSearchAndReserve operation.
     * @callback module:api/NumberAdministrationApi~numberSearchAndReserveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberSearchReserveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Search and Reserve 
     * This API is used to search for number(s) and reserve any of those number(s) which can be reserved. The schemas and request types are like the search action with a few additional fields involving the contact information and notes. When a search and reserve API request is submitted, a waiting lock is placed on the number(s) for a period defined around reservations. If the RSP-NSR is unable to fully complete a reservation request within the allotted time, a response with an error message will be returned for each number still in a waiting status. Waiting means that TFNR system is still processing the request, but does not guarantee a reservation. If any number is searched for and found, it will simultaneously be reserved.  If the quantity in the request is greater than 10 it would be accepted (202 Response) as a bulk request, for which a Bulk ID would be returned along with Request Id. 
     * @param {String} authorization Bearer access_token
     * @param {module:model/NumberSearchReserveRequest} body 
     * @param {module:api/NumberAdministrationApi~numberSearchAndReserveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberSearchReserveResponse}
     */
    numberSearchAndReserve(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberSearchAndReserve");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling numberSearchAndReserve");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberSearchReserveResponse;

      return this.apiClient.callApi(
        '/num/number/srchres', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberSearchAndReserveByRequestId operation.
     * @callback module:api/NumberAdministrationApi~numberSearchAndReserveByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberSearchReserveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Search and Reserve Polling 
     * This API is used if [/num/number/srchres](#tag/Number-Search-and-Reserve%2Fpaths%2F~1num~1number~1srchres%2Fput) api returns a HTTP 202 with a RequestID in the payload. Please see the section [Polling](#section/Polling) for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/NumberAdministrationApi~numberSearchAndReserveByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberSearchReserveResponse}
     */
    numberSearchAndReserveByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberSearchAndReserveByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling numberSearchAndReserveByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberSearchReserveResponse;

      return this.apiClient.callApi(
        '/num/number/srchres/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberSearchByRequestId operation.
     * @callback module:api/NumberAdministrationApi~numberSearchByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Search - Sync Timeout
     * This API is used if [/num/number/search](#tag/Number-Search%2Fpaths%2F~1num~1number~1search%2Fput) api returns a HTTP 202 with a RequestID in the payload. Please see the section [Polling](#section/Polling) for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/NumberAdministrationApi~numberSearchByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberSearchResponse}
     */
    numberSearchByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberSearchByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling numberSearchByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberSearchResponse;

      return this.apiClient.callApi(
        '/num/number/search/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberSpare operation.
     * @callback module:api/NumberAdministrationApi~numberSpareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberSpareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Status Spare
     * This API is used to request for a dial number to be spared. 
     * @param {String} authorization Bearer access_token
     * @param {module:model/NumberSpareRequest} body 
     * @param {module:api/NumberAdministrationApi~numberSpareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberSpareResponse}
     */
    numberSpare(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberSpare");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling numberSpare");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberSpareResponse;

      return this.apiClient.callApi(
        '/num/status/spare', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberSpareByRequestId operation.
     * @callback module:api/NumberAdministrationApi~numberSpareByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberSpareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Status Spare - Sync Timeout
     * This API is used if /num/status/spare API returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/NumberAdministrationApi~numberSpareByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberSpareResponse}
     */
    numberSpareByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberSpareByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling numberSpareByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberSpareResponse;

      return this.apiClient.callApi(
        '/num/status/spare/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberUpdate operation.
     * @callback module:api/NumberAdministrationApi~numberUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Update
     * The number update API is used to modify the contact information, notes, or the controlling RespOrg. Before calling this API it is REQUIRED to invoke /number/query for the same number.
     * @param {String} authorization Bearer access_token
     * @param {module:model/NumberUpdateRequest} body 
     * @param {module:api/NumberAdministrationApi~numberUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberUpdateResponse}
     */
    numberUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling numberUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberUpdateResponse;

      return this.apiClient.callApi(
        '/num/number/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the numberUpdateByRequestId operation.
     * @callback module:api/NumberAdministrationApi~numberUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Number Update - Sync Timeout
     * This API is used if [/num/number/update](#tag/Number-Update%2Fpaths%2F~1num~1number~1update%2Fput) api returns a HTTP 202 with a RequestID in the payload. Please see the section [Polling](#section/Polling) for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/NumberAdministrationApi~numberUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberUpdateResponse}
     */
    numberUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling numberUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling numberUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NumberUpdateResponse;

      return this.apiClient.callApi(
        '/num/number/update/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the troubleReferralNumberQuery operation.
     * @callback module:api/NumberAdministrationApi~troubleReferralNumberQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TroubleNumberQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trouble Referral Number Query 
     * This API is used to retrieve the trouble referral number associated with specific number(s) or RESP ORG. Users can request up to ten (10) dial numbers in a single request. This call provides information only, and cannot be used to change the trouble referral number associated with the RESP ORG.
     * @param {String} authorization Bearer access_token
     * @param {Array.<String>} numList dialed Number
     * @param {module:api/NumberAdministrationApi~troubleReferralNumberQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TroubleNumberQueryResponse}
     */
    troubleReferralNumberQuery(authorization, numList, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling troubleReferralNumberQuery");
      }

      // verify the required parameter 'numList' is set
      if (numList === undefined || numList === null) {
        throw new Error("Missing the required parameter 'numList' when calling troubleReferralNumberQuery");
      }


      let pathParams = {
      };
      let queryParams = {
        'numList': this.apiClient.buildCollectionParam(numList, 'csv')
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TroubleNumberQueryResponse;

      return this.apiClient.callApi(
        '/num/trq/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the troubleReferralNumberQuerybyRequestId operation.
     * @callback module:api/NumberAdministrationApi~troubleReferralNumberQuerybyRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TroubleNumberQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trouble Referral Number Query - Sync Timeout 
     * This API is used if /num/trq/query API returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/NumberAdministrationApi~troubleReferralNumberQuerybyRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TroubleNumberQueryResponse}
     */
    troubleReferralNumberQuerybyRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling troubleReferralNumberQuerybyRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling troubleReferralNumberQuerybyRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TroubleNumberQueryResponse;

      return this.apiClient.callApi(
        '/num/trq/query/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
