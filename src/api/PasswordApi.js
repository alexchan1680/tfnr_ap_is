/**
 * TFNR APIs
 * # Introduction  This document describes the new SMS/800 Toll-Free Number (TFN) Registry APIs exposed to all Responsible Organization (Resp Org) users requiring to access the SMS/800 TFN Registry via APIs.  The SMS/800 TFN Registry Application Program Interfaces (APIs) follow a standard RESTful model using the Richardson Maturity Model level 1 approach with the standard HTTP verbs @GET, @POST, @PUT, @DELETE to represent the CRUD operations against the defined resources. The PUT verb is used for full and partial updates, POST for creates, GET for reads, and DELETE for deletes.  # Authentication  SMS/800 Toll-Free Number (TFN) Registry APIs requires access tokens to invoke business API end points. The access token can be obtained in two different ways, using the industry standard OAuth 2.0 password grant flow or by invoking an [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api.  # OAuth 2.0   TFNR APIS support industry standard OAuth 2.0 authentication and authorization for accessing the APIs. The API server supports password grant for obtaining the access tokens which are valid for 60 minutes and refresh grant for refreshing/using the access tokens beyond the initial 60 minutes.    The following endpoints can be used for invoking the OAuth 2.0 functionalities.    Production: https://api-tfnregistry.somos.com/token    Sandbox: https://api-devp-tfnregistry.somos.com/token    To use OAuth 2.0 password grant flow, you will be required to provide four values, user-name, password, clientKey and clienkSecret. You can get the clientKey and clientSecret by invoking the [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api. You are required to invoke this only once to obtain the keys.  Never share your secret keys. Keep them guarded and secure.   Access Tokens have an expiration period of 60 minutes and needs to be refreshed using the refresh grant type of OAuth2.0 standards.    /token api can be used for both password and refresh grants. To obtain the accesstoken for the first time, the following information needs to be posted as part of the body   ```json  grant_type=password&username={logonid}&password={pass}  ```  ```json  grant_type=refresh_token&refresh_token={retoken}  ```   and the header should include the following information   ```json  Authorization : Basic (base64 encoded  clientKey:clientSecret) ```  both the password grant and refresh grant returns the following json body   ```json  {    \"scope\":\"default\",    \"token_type\":\"Bearer\",    \"expires_in\":3600,    \"refresh_token\":\"ca5a51f18b2edf4eaa9e4b871e42b58a\",    \"access_token\":\"f2c66f146278aaaf6513b585b5b68d1d\" } ``` # Invoking APIS    It is IMPORTANT to note that, at this time SMS/800 Toll-Free Number (TFN) Registry APIs only supports one active session for any given user name for all channels (WBA, TFNR Application and Enhanced Platform). If the user tries to open multiple sessions, the previous session will be automatically terminated.  Also, at this time APIs do not support parallel requests due to the limitation of the existing system. So, users should only send one request at a time and wait till the response is returned by the server. If the backed server returns a 202 with a RequestId, the user should NOT submit another request till the user does the polling and obtain the response of the previous request.    # Polling    Some of the TFNR APIs when invoked has the possibility of exceeding the defined timeout for a synchronous call, and so there is a possibility that the apis will return a HTTP 202 code with a RequestId that a client will use to poll for a response. This is common for search and reserve APIs and users are responsible to capture the RequestId and use the APIs provided to do the polling and obtain the actual response of the api invocation. In certain cases when the users do the polling, they might get a 202 again if the request is still being processed, in this case the user is required to wait for few seconds and do the polling till he gets the final response back from the server.    # Throttling    Users will be throttled at the RespOrg Level with a rate limit of 12000 requests/minute per RespOrg in Production and 3000 requests/minute per RespOrg in Developer Portal environment.
 *
 * OpenAPI spec version: v1
 * Contact: productsupport@somos.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PasswordForgetRequest from '../model/PasswordForgetRequest';
import PasswordForgetResponse from '../model/PasswordForgetResponse';
import PasswordResetRequest from '../model/PasswordResetRequest';
import PasswordResetResponse from '../model/PasswordResetResponse';
import PasswordUpdateRequest from '../model/PasswordUpdateRequest';
import PasswordUpdateResponse from '../model/PasswordUpdateResponse';
import TimeoutResponse from '../model/TimeoutResponse';

/**
* Password service.
* @module api/PasswordApi
* @version v1
*/
export default class PasswordApi {

    /**
    * Constructs a new PasswordApi. 
    * @alias module:api/PasswordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the passwordForgot operation.
     * @callback module:api/PasswordApi~passwordForgotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordForgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot Password 
     * This API is used to request the system for a reset password link.  The call will assume that the user has forgotten their password, but knows their login id.
     * @param {module:model/PasswordForgetRequest} body 
     * @param {module:api/PasswordApi~passwordForgotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordForgetResponse}
     */
    passwordForgot(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling passwordForgot");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordForgetResponse;

      return this.apiClient.callApi(
        '/sec/usr/forgotPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordForgotbyRequestId operation.
     * @callback module:api/PasswordApi~passwordForgotbyRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordForgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot Password - Sync Timeout 
     * This API is used to poll the status of forgot password request. It is used if /usr/forgotPassword API returns an HTTP 202 with a RequestID in the payload.
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PasswordApi~passwordForgotbyRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordForgetResponse}
     */
    passwordForgotbyRequestId(requestId, callback) {
      let postBody = null;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling passwordForgotbyRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordForgetResponse;

      return this.apiClient.callApi(
        '/sec/usr/forgotPassword/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordReset operation.
     * @callback module:api/PasswordApi~passwordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordResetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password Reset 
     * This API allows the User to reset their password. It is invoked through the URL link that is made available to the User (primarily through an email) on submitting the Forgot Password request.
     * @param {module:model/PasswordResetRequest} body 
     * @param {module:api/PasswordApi~passwordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordResetResponse}
     */
    passwordReset(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling passwordReset");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordResetResponse;

      return this.apiClient.callApi(
        '/sec/usr/resetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordResetbyRequestId operation.
     * @callback module:api/PasswordApi~passwordResetbyRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordResetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password Reset - Sync Timeout 
     * This API allows the User to reset their password. If the /usr/resetPassword API returns an HTTP 202 with a RequestID in the payload, then this API can be invoked for polling. 
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PasswordApi~passwordResetbyRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordResetResponse}
     */
    passwordResetbyRequestId(requestId, callback) {
      let postBody = null;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling passwordResetbyRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordResetResponse;

      return this.apiClient.callApi(
        '/sec/usr/resetPassword/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordUpdate operation.
     * @callback module:api/PasswordApi~passwordUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password Update
     * This API is used to update a client&#39;s password. The reason for the update might be voluntary or required due to a password reset/password expired.    1. Voluntary: Provide the 3 values and server responds with either a suceess or failed response.    2. Required Update: Before calling the /password/update, it is required to invoke the /session/open other wise the system will return error.
     * @param {String} authorization Bearer access_token
     * @param {module:model/PasswordUpdateRequest} body 
     * @param {module:api/PasswordApi~passwordUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordUpdateResponse}
     */
    passwordUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling passwordUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling passwordUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordUpdateResponse;

      return this.apiClient.callApi(
        '/sec/password/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordUpdateByRequestId operation.
     * @callback module:api/PasswordApi~passwordUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password Update - Sync Timeout
     * This API is used if [/password/update](#tag/Password-Update%2Fpaths%2F~1sec~1password~1update%2Fput) api returns a HTTP 202 with a RequestID in the payload. Please see the section [Polling](#section/Polling) for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PasswordApi~passwordUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordUpdateResponse}
     */
    passwordUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling passwordUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling passwordUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordUpdateResponse;

      return this.apiClient.callApi(
        '/sec/password/update/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
