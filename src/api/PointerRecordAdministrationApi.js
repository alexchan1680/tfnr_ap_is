/**
 * TFNR APIs
 * # Introduction  This document describes the new SMS/800 Toll-Free Number (TFN) Registry APIs exposed to all Responsible Organization (Resp Org) users requiring to access the SMS/800 TFN Registry via APIs.  The SMS/800 TFN Registry Application Program Interfaces (APIs) follow a standard RESTful model using the Richardson Maturity Model level 1 approach with the standard HTTP verbs @GET, @POST, @PUT, @DELETE to represent the CRUD operations against the defined resources. The PUT verb is used for full and partial updates, POST for creates, GET for reads, and DELETE for deletes.  # Authentication  SMS/800 Toll-Free Number (TFN) Registry APIs requires access tokens to invoke business API end points. The access token can be obtained in two different ways, using the industry standard OAuth 2.0 password grant flow or by invoking an [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api.  # OAuth 2.0   TFNR APIS support industry standard OAuth 2.0 authentication and authorization for accessing the APIs. The API server supports password grant for obtaining the access tokens which are valid for 60 minutes and refresh grant for refreshing/using the access tokens beyond the initial 60 minutes.    The following endpoints can be used for invoking the OAuth 2.0 functionalities.    Production: https://api-tfnregistry.somos.com/token    Sandbox: https://api-devp-tfnregistry.somos.com/token    To use OAuth 2.0 password grant flow, you will be required to provide four values, user-name, password, clientKey and clienkSecret. You can get the clientKey and clientSecret by invoking the [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api. You are required to invoke this only once to obtain the keys.  Never share your secret keys. Keep them guarded and secure.   Access Tokens have an expiration period of 60 minutes and needs to be refreshed using the refresh grant type of OAuth2.0 standards.    /token api can be used for both password and refresh grants. To obtain the accesstoken for the first time, the following information needs to be posted as part of the body   ```json  grant_type=password&username={logonid}&password={pass}  ```  ```json  grant_type=refresh_token&refresh_token={retoken}  ```   and the header should include the following information   ```json  Authorization : Basic (base64 encoded  clientKey:clientSecret) ```  both the password grant and refresh grant returns the following json body   ```json  {    \"scope\":\"default\",    \"token_type\":\"Bearer\",    \"expires_in\":3600,    \"refresh_token\":\"ca5a51f18b2edf4eaa9e4b871e42b58a\",    \"access_token\":\"f2c66f146278aaaf6513b585b5b68d1d\" } ``` # Invoking APIS    It is IMPORTANT to note that, at this time SMS/800 Toll-Free Number (TFN) Registry APIs only supports one active session for any given user name for all channels (WBA, TFNR Application and Enhanced Platform). If the user tries to open multiple sessions, the previous session will be automatically terminated.  Also, at this time APIs do not support parallel requests due to the limitation of the existing system. So, users should only send one request at a time and wait till the response is returned by the server. If the backed server returns a 202 with a RequestId, the user should NOT submit another request till the user does the polling and obtain the response of the previous request.    # Polling    Some of the TFNR APIs when invoked has the possibility of exceeding the defined timeout for a synchronous call, and so there is a possibility that the apis will return a HTTP 202 code with a RequestId that a client will use to poll for a response. This is common for search and reserve APIs and users are responsible to capture the RequestId and use the APIs provided to do the polling and obtain the actual response of the api invocation. In certain cases when the users do the polling, they might get a 202 again if the request is still being processed, in this case the user is required to wait for few seconds and do the polling till he gets the final response back from the server.    # Throttling    Users will be throttled at the RespOrg Level with a rate limit of 12000 requests/minute per RespOrg in Production and 3000 requests/minute per RespOrg in Developer Portal environment.
 *
 * OpenAPI spec version: v1
 * Contact: productsupport@somos.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletePointerRequest from '../model/DeletePointerRequest';
import DeletePointerResponse from '../model/DeletePointerResponse';
import DisconnectPointerRequest from '../model/DisconnectPointerRequest';
import DisconnectPointerResponse from '../model/DisconnectPointerResponse';
import DisconnectUpdatePointerRequest from '../model/DisconnectUpdatePointerRequest';
import DisconnectUpdatePointerResponse from '../model/DisconnectUpdatePointerResponse';
import PointerCopyRequest from '../model/PointerCopyRequest';
import PointerCopyResponse from '../model/PointerCopyResponse';
import PointerCopyUpdateRequest from '../model/PointerCopyUpdateRequest';
import PointerCopyUpdateResponse from '../model/PointerCopyUpdateResponse';
import PointerCreateRequest from '../model/PointerCreateRequest';
import PointerCreateResponse from '../model/PointerCreateResponse';
import PointerRetrieveResponse from '../model/PointerRetrieveResponse';
import PointerTransferRequest from '../model/PointerTransferRequest';
import PointerTransferResponse from '../model/PointerTransferResponse';
import PointerTransferUpdateRequest from '../model/PointerTransferUpdateRequest';
import PointerTransferUpdateResponse from '../model/PointerTransferUpdateResponse';
import PointerUpdateRequest from '../model/PointerUpdateRequest';
import PointerUpdateResponse from '../model/PointerUpdateResponse';
import TimeoutResponse from '../model/TimeoutResponse';

/**
* PointerRecordAdministration service.
* @module api/PointerRecordAdministrationApi
* @version v1
*/
export default class PointerRecordAdministrationApi {

    /**
    * Constructs a new PointerRecordAdministrationApi. 
    * @alias module:api/PointerRecordAdministrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pointerRecordCopy operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerCopyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Copy
     * The request is meant to allow for a copy a pointer record to allow for a future effective data or now or a different section (such as CAD/LAD/CPR).Note that the flags for whether or not to copy specific areas will be applied to only copy what is requested. The flags will determine if the sections of data they are associated with will be copied. Also note, if tgtNum(target) is different than the num(Source),then tgtNum should be in working or assigned status.
     * @param {String} authorization Bearer access_token
     * @param {module:model/PointerCopyRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerCopyResponse}
     */
    pointerRecordCopy(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordCopy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordCopy");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerCopyResponse;

      return this.apiClient.callApi(
        '/cus/pointer/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordCopyByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordCopyByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerCopyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Copy - Sync Timeout
     * This API is used if /cus/record/copy api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordCopyByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerCopyResponse}
     */
    pointerRecordCopyByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordCopyByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordCopyByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerCopyResponse;

      return this.apiClient.callApi(
        '/cus/pointer/copy/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordCopyUdateByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordCopyUdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerCopyUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Copy Update - Sync Timeout
     * This API is used if /cus/pointer/copyUpdate API returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling. 
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordCopyUdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerCopyUpdateResponse}
     */
    pointerRecordCopyUdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordCopyUdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordCopyUdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerCopyUpdateResponse;

      return this.apiClient.callApi(
        '/cus/pointer/copyUpdate/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordCopyUpdate operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordCopyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerCopyUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Copy Update
     * This API is used to update a record to complete the copy. Before calling this API, it is Recommended to invoke /cus/pointer/copy, and create a copy record. This API has anyOf parameters: suppFormNum or svcOrderNum.
     * @param {String} authorization Bearer access_token
     * @param {module:model/PointerCopyUpdateRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordCopyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerCopyUpdateResponse}
     */
    pointerRecordCopyUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordCopyUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordCopyUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerCopyUpdateResponse;

      return this.apiClient.callApi(
        '/cus/pointer/copyUpdate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordCreate operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Create
     * This API is used to create a pointer record. This API has anyOf parameters: suppFormNum or svcOrderNum.
     * @param {String} authorization Bearer access_token
     * @param {module:model/PointerCreateRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerCreateResponse}
     */
    pointerRecordCreate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordCreate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerCreateResponse;

      return this.apiClient.callApi(
        '/cus/pointer/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordCreateByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordCreateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Create - Sync Timeout
     * This API is used if /cus/pointer/create api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling. 
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordCreateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerCreateResponse}
     */
    pointerRecordCreateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordCreateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordCreateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerCreateResponse;

      return this.apiClient.callApi(
        '/cus/pointer/create/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordDelete operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePointerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Delete
     * This API will allow the user to delete an existing Customer Pointer Record for the provided effective date and time.
     * @param {String} authorization Bearer access_token
     * @param {module:model/DeletePointerRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePointerResponse}
     */
    pointerRecordDelete(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordDelete");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordDelete");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletePointerResponse;

      return this.apiClient.callApi(
        '/cus/pointer/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordDeleteByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordDeleteByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePointerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Delete - Sync Timeout
     * This API is used if /cus/pointer/delete API returns a HTTP 202 with a RequestID in the pay load. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordDeleteByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePointerResponse}
     */
    pointerRecordDeleteByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordDeleteByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordDeleteByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletePointerResponse;

      return this.apiClient.callApi(
        '/cus/pointer/delete/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordDisconnect operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordDisconnectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisconnectPointerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Disconnect
     * This API is used to create a Disconnect Pointer Record for the effective date, and time. This API has anyOf parameters: suppFormNum or svcOrderNum.
     * @param {String} authorization Bearer access_token
     * @param {module:model/DisconnectPointerRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordDisconnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisconnectPointerResponse}
     */
    pointerRecordDisconnect(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordDisconnect");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordDisconnect");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisconnectPointerResponse;

      return this.apiClient.callApi(
        '/cus/pointer/disconnect', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordDisconnectByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordDisconnectByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisconnectPointerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Disconnect - Sync Timeout
     * This API is used if /cus/pointer/disconnect api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordDisconnectByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisconnectPointerResponse}
     */
    pointerRecordDisconnectByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordDisconnectByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordDisconnectByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisconnectPointerResponse;

      return this.apiClient.callApi(
        '/cus/pointer/disconnect/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordDisconnectUpdate operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordDisconnectUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisconnectUpdatePointerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Disconnect Update
     * This API is used to update the Disconnect Pointer Record. This API has anyOf parameters: suppFormNum or svcOrderNum.
     * @param {String} authorization Bearer access_token
     * @param {module:model/DisconnectUpdatePointerRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordDisconnectUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisconnectUpdatePointerResponse}
     */
    pointerRecordDisconnectUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordDisconnectUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordDisconnectUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisconnectUpdatePointerResponse;

      return this.apiClient.callApi(
        '/cus/pointer/disconnectUpdate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordDisconnectUpdateByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordDisconnectUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisconnectUpdatePointerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Disconnect Update - Sync Timeout
     * This API is used if /cus/pointer/disconnectUpdate api returns a HTTP 202 with a RequestID in the pay load. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordDisconnectUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisconnectUpdatePointerResponse}
     */
    pointerRecordDisconnectUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordDisconnectUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordDisconnectUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisconnectUpdatePointerResponse;

      return this.apiClient.callApi(
        '/cus/pointer/disconnectUpdate/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordTransfer operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Transfer
     * This API is used to transfer a customer pointer record to a future effective date.
     * @param {String} authorization Bearer access_token
     * @param {module:model/PointerTransferRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerTransferResponse}
     */
    pointerRecordTransfer(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordTransfer");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordTransfer");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerTransferResponse;

      return this.apiClient.callApi(
        '/cus/pointer/transfer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordTransferByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordTransferByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Transfer - Sync Timeout
     * This API is used if /cus/pointer/transfer API returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling. 
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordTransferByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerTransferResponse}
     */
    pointerRecordTransferByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordTransferByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordTransferByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerTransferResponse;

      return this.apiClient.callApi(
        '/cus/pointer/transfer/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordTransferUpdate operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordTransferUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerTransferUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Transfer Update
     * This API is used to update a record to complete the transfer. The Transfer update will allow for the change on the record post the transfer command. Before calling this API it is REQUIRED to invoke /cus/pointer/transfer, and create a transfer record. This API has anyOf parameters: suppFormNum or svcOrderNum.
     * @param {String} authorization Bearer access_token
     * @param {module:model/PointerTransferUpdateRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordTransferUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerTransferUpdateResponse}
     */
    pointerRecordTransferUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordTransferUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordTransferUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerTransferUpdateResponse;

      return this.apiClient.callApi(
        '/cus/pointer/transferUpdate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordTransferUpdateByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordTransferUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerTransferUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Transfer Update - Sync Timeout
     * This API is used if /cus/pointer/transferUpdate API returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling. 
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordTransferUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerTransferUpdateResponse}
     */
    pointerRecordTransferUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordTransferUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordTransferUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerTransferUpdateResponse;

      return this.apiClient.callApi(
        '/cus/pointer/transferUpdate/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordUpdate operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Update
     * This API is used to update a Pointer Record for a dial number. This API has anyOf parameters: suppFormNum or svcOrderNum.
     * @param {String} authorization Bearer access_token
     * @param {module:model/PointerUpdateRequest} body 
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerUpdateResponse}
     */
    pointerRecordUpdate(authorization, body, callback) {
      let postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pointerRecordUpdate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerUpdateResponse;

      return this.apiClient.callApi(
        '/cus/pointer/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordUpdateByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordUpdateByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record Update - Sync Timeout
     * This API is used if /cus/pointer/update api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordUpdateByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerUpdateResponse}
     */
    pointerRecordUpdateByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordUpdateByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordUpdateByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerUpdateResponse;

      return this.apiClient.callApi(
        '/cus/pointer/update/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordView operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerRetrieveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record View
     * This API is used to retrieve a list of possible records based on the provided dialed number, and effective date time.
     * @param {String} authorization Bearer access_token
     * @param {String} num dialed Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.effDtTm Effective date and time
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerRetrieveResponse}
     */
    pointerRecordView(authorization, num, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordView");
      }

      // verify the required parameter 'num' is set
      if (num === undefined || num === null) {
        throw new Error("Missing the required parameter 'num' when calling pointerRecordView");
      }


      let pathParams = {
      };
      let queryParams = {
        'num': num,
        'effDtTm': opts['effDtTm']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerRetrieveResponse;

      return this.apiClient.callApi(
        '/cus/pointer/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pointerRecordViewByRequestId operation.
     * @callback module:api/PointerRecordAdministrationApi~pointerRecordViewByRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointerRetrieveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pointer Record View - Sync Timeout
     * This API is used if /cus/pointer/view api returns a HTTP 202 with a RequestID in the payload. Please see the section Polling for more information on how to do the polling.
     * @param {String} authorization Bearer access_token
     * @param {Number} requestId RequestId returned due to timeout
     * @param {module:api/PointerRecordAdministrationApi~pointerRecordViewByRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointerRetrieveResponse}
     */
    pointerRecordViewByRequestId(authorization, requestId, callback) {
      let postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling pointerRecordViewByRequestId");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling pointerRecordViewByRequestId");
      }


      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointerRetrieveResponse;

      return this.apiClient.callApi(
        '/cus/pointer/view/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
