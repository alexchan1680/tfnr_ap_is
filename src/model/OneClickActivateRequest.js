/**
 * TFNR APIs
 * # Introduction  This document describes the new SMS/800 Toll-Free Number (TFN) Registry APIs exposed to all Responsible Organization (Resp Org) users requiring to access the SMS/800 TFN Registry via APIs.  The SMS/800 TFN Registry Application Program Interfaces (APIs) follow a standard RESTful model using the Richardson Maturity Model level 1 approach with the standard HTTP verbs @GET, @POST, @PUT, @DELETE to represent the CRUD operations against the defined resources. The PUT verb is used for full and partial updates, POST for creates, GET for reads, and DELETE for deletes.  # Authentication  SMS/800 Toll-Free Number (TFN) Registry APIs requires access tokens to invoke business API end points. The access token can be obtained in two different ways, using the industry standard OAuth 2.0 password grant flow or by invoking an [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api.  # OAuth 2.0   TFNR APIS support industry standard OAuth 2.0 authentication and authorization for accessing the APIs. The API server supports password grant for obtaining the access tokens which are valid for 60 minutes and refresh grant for refreshing/using the access tokens beyond the initial 60 minutes.    The following endpoints can be used for invoking the OAuth 2.0 functionalities.    Production: https://api-tfnregistry.somos.com/token    Sandbox: https://api-devp-tfnregistry.somos.com/token    To use OAuth 2.0 password grant flow, you will be required to provide four values, user-name, password, clientKey and clienkSecret. You can get the clientKey and clientSecret by invoking the [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api. You are required to invoke this only once to obtain the keys.  Never share your secret keys. Keep them guarded and secure.   Access Tokens have an expiration period of 60 minutes and needs to be refreshed using the refresh grant type of OAuth2.0 standards.    /token api can be used for both password and refresh grants. To obtain the accesstoken for the first time, the following information needs to be posted as part of the body   ```json  grant_type=password&username={logonid}&password={pass}  ```  ```json  grant_type=refresh_token&refresh_token={retoken}  ```   and the header should include the following information   ```json  Authorization : Basic (base64 encoded  clientKey:clientSecret) ```  both the password grant and refresh grant returns the following json body   ```json  {    \"scope\":\"default\",    \"token_type\":\"Bearer\",    \"expires_in\":3600,    \"refresh_token\":\"ca5a51f18b2edf4eaa9e4b871e42b58a\",    \"access_token\":\"f2c66f146278aaaf6513b585b5b68d1d\" } ``` # Invoking APIS    It is IMPORTANT to note that, at this time SMS/800 Toll-Free Number (TFN) Registry APIs only supports one active session for any given user name for all channels (WBA, TFNR Application and Enhanced Platform). If the user tries to open multiple sessions, the previous session will be automatically terminated.  Also, at this time APIs do not support parallel requests due to the limitation of the existing system. So, users should only send one request at a time and wait till the response is returned by the server. If the backed server returns a 202 with a RequestId, the user should NOT submit another request till the user does the polling and obtain the response of the previous request.    # Polling    Some of the TFNR APIs when invoked has the possibility of exceeding the defined timeout for a synchronous call, and so there is a possibility that the apis will return a HTTP 202 code with a RequestId that a client will use to poll for a response. This is common for search and reserve APIs and users are responsible to capture the RequestId and use the APIs provided to do the polling and obtain the actual response of the api invocation. In certain cases when the users do the polling, they might get a 202 again if the request is still being processed, in this case the user is required to wait for few seconds and do the polling till he gets the final response back from the server.    # Throttling    Users will be throttled at the RespOrg Level with a rate limit of 12000 requests/minute per RespOrg in Production and 3000 requests/minute per RespOrg in Developer Portal environment.
 *
 * OpenAPI spec version: v1
 * Contact: productsupport@somos.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import Cons from './Cons';
import Npa from './Npa';
import TimeZone from './TimeZone';





/**
* The OneClickActivateRequest model module.
* @module model/OneClickActivateRequest
* @version v1
*/
export default class OneClickActivateRequest {
    /**
    * Constructs a new <code>OneClickActivateRequest</code>.
    * @alias module:model/OneClickActivateRequest
    * @class
    * @param qty {Number} Quantity of numbers to be searched for. Valid range 1-500
    * @param conName {String} Name of Contact. No numbers allowed
    * @param conPhone {String} Contact Person's phone number
    * @param effDtTm {String} Effective date and time of the records
    * @param tempName {String} 
    * @param numTermLine {Number} 
    * @param svcOrderNum {String} Service Order Number. 13 bytes identifier. Range can be from 4 to 13 bytes. First character must be alphabetic. Second thru twelfth characters must be alphanumeric thirteenth character must be alphabetic. Required unless sf field is used either sf or so is required 
    */

    constructor(qty, conName, conPhone, effDtTm, tempName, numTermLine, svcOrderNum) {
        

        
        

        this['qty'] = qty;this['conName'] = conName;this['conPhone'] = conPhone;this['effDtTm'] = effDtTm;this['tempName'] = tempName;this['numTermLine'] = numTermLine;this['svcOrderNum'] = svcOrderNum;

        
    }

    /**
    * Constructs a <code>OneClickActivateRequest</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/OneClickActivateRequest} obj Optional instance to populate.
    * @return {module:model/OneClickActivateRequest} The populated <code>OneClickActivateRequest</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OneClickActivateRequest();

            
            
            

            if (data.hasOwnProperty('qty')) {
                obj['qty'] = ApiClient.convertToType(data['qty'], 'Number');
            }
            if (data.hasOwnProperty('conName')) {
                obj['conName'] = ApiClient.convertToType(data['conName'], 'String');
            }
            if (data.hasOwnProperty('conPhone')) {
                obj['conPhone'] = ApiClient.convertToType(data['conPhone'], 'String');
            }
            if (data.hasOwnProperty('shrtNotes')) {
                obj['shrtNotes'] = ApiClient.convertToType(data['shrtNotes'], 'String');
            }
            if (data.hasOwnProperty('numList')) {
                obj['numList'] = ApiClient.convertToType(data['numList'], ['String']);
            }
            if (data.hasOwnProperty('npa')) {
                obj['npa'] = Npa.constructFromObject(data['npa']);
            }
            if (data.hasOwnProperty('nxx')) {
                obj['nxx'] = ApiClient.convertToType(data['nxx'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'String');
            }
            if (data.hasOwnProperty('cons')) {
                obj['cons'] = Cons.constructFromObject(data['cons']);
            }
            if (data.hasOwnProperty('effDtTm')) {
                obj['effDtTm'] = ApiClient.convertToType(data['effDtTm'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = TimeZone.constructFromObject(data['timeZone']);
            }
            if (data.hasOwnProperty('tempName')) {
                obj['tempName'] = ApiClient.convertToType(data['tempName'], 'String');
            }
            if (data.hasOwnProperty('numTermLine')) {
                obj['numTermLine'] = ApiClient.convertToType(data['numTermLine'], 'Number');
            }
            if (data.hasOwnProperty('svcOrderNum')) {
                obj['svcOrderNum'] = ApiClient.convertToType(data['svcOrderNum'], 'String');
            }
        }
        return obj;
    }

    /**
    * Quantity of numbers to be searched for. Valid range 1-500
    * @member {Number} qty
    */
    qty = undefined;
    /**
    * Name of Contact. No numbers allowed
    * @member {String} conName
    */
    conName = undefined;
    /**
    * Contact Person's phone number
    * @member {String} conPhone
    */
    conPhone = undefined;
    /**
    * Additional Information
    * @member {String} shrtNotes
    */
    shrtNotes = undefined;
    /**
    * @member {Array.<String>} numList
    */
    numList = undefined;
    /**
    * @member {module:model/Npa} npa
    */
    npa = undefined;
    /**
    * Specifies the NXX where search should start. Valid values are 000 to 999
    * @member {String} nxx
    */
    nxx = undefined;
    /**
    * Staring Line - Specifies the last 4 characters of phone number.
    * @member {String} line
    */
    line = undefined;
    /**
    * @member {module:model/Cons} cons
    */
    cons = undefined;
    /**
    * Effective date and time of the records
    * @member {String} effDtTm
    */
    effDtTm = undefined;
    /**
    * @member {module:model/TimeZone} timeZone
    */
    timeZone = undefined;
    /**
    * @member {String} tempName
    */
    tempName = undefined;
    /**
    * @member {Number} numTermLine
    */
    numTermLine = undefined;
    /**
    * Service Order Number. 13 bytes identifier. Range can be from 4 to 13 bytes. First character must be alphabetic. Second thru twelfth characters must be alphanumeric thirteenth character must be alphabetic. Required unless sf field is used either sf or so is required 
    * @member {String} svcOrderNum
    */
    svcOrderNum = undefined;








}


