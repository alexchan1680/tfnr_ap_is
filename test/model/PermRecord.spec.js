/**
 * TFNR APIs
 * # Introduction  This document describes the new SMS/800 Toll-Free Number (TFN) Registry APIs exposed to all Responsible Organization (Resp Org) users requiring to access the SMS/800 TFN Registry via APIs.  The SMS/800 TFN Registry Application Program Interfaces (APIs) follow a standard RESTful model using the Richardson Maturity Model level 1 approach with the standard HTTP verbs @GET, @POST, @PUT, @DELETE to represent the CRUD operations against the defined resources. The PUT verb is used for full and partial updates, POST for creates, GET for reads, and DELETE for deletes.  # Authentication  SMS/800 Toll-Free Number (TFN) Registry APIs requires access tokens to invoke business API end points. The access token can be obtained in two different ways, using the industry standard OAuth 2.0 password grant flow or by invoking an [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api.  # OAuth 2.0   TFNR APIS support industry standard OAuth 2.0 authentication and authorization for accessing the APIs. The API server supports password grant for obtaining the access tokens which are valid for 60 minutes and refresh grant for refreshing/using the access tokens beyond the initial 60 minutes.    The following endpoints can be used for invoking the OAuth 2.0 functionalities.    Production: https://api-tfnregistry.somos.com/token    Sandbox: https://api-devp-tfnregistry.somos.com/token    To use OAuth 2.0 password grant flow, you will be required to provide four values, user-name, password, clientKey and clienkSecret. You can get the clientKey and clientSecret by invoking the [/session/open](#tag/session%2Fpaths%2F~1sec~1session~1open%2Fpost) api. You are required to invoke this only once to obtain the keys.  Never share your secret keys. Keep them guarded and secure.   Access Tokens have an expiration period of 60 minutes and needs to be refreshed using the refresh grant type of OAuth2.0 standards.    /token api can be used for both password and refresh grants. To obtain the accesstoken for the first time, the following information needs to be posted as part of the body   ```json  grant_type=password&username={logonid}&password={pass}  ```  ```json  grant_type=refresh_token&refresh_token={retoken}  ```   and the header should include the following information   ```json  Authorization : Basic (base64 encoded  clientKey:clientSecret) ```  both the password grant and refresh grant returns the following json body   ```json  {    \"scope\":\"default\",    \"token_type\":\"Bearer\",    \"expires_in\":3600,    \"refresh_token\":\"ca5a51f18b2edf4eaa9e4b871e42b58a\",    \"access_token\":\"f2c66f146278aaaf6513b585b5b68d1d\" } ``` # Invoking APIS    It is IMPORTANT to note that, at this time SMS/800 Toll-Free Number (TFN) Registry APIs only supports one active session for any given user name for all channels (WBA, TFNR Application and Enhanced Platform). If the user tries to open multiple sessions, the previous session will be automatically terminated.  Also, at this time APIs do not support parallel requests due to the limitation of the existing system. So, users should only send one request at a time and wait till the response is returned by the server. If the backed server returns a 202 with a RequestId, the user should NOT submit another request till the user does the polling and obtain the response of the previous request.    # Polling    Some of the TFNR APIs when invoked has the possibility of exceeding the defined timeout for a synchronous call, and so there is a possibility that the apis will return a HTTP 202 code with a RequestId that a client will use to poll for a response. This is common for search and reserve APIs and users are responsible to capture the RequestId and use the APIs provided to do the polling and obtain the actual response of the api invocation. In certain cases when the users do the polling, they might get a 202 again if the request is still being processed, in this case the user is required to wait for few seconds and do the polling till he gets the final response back from the server.    # Throttling    Users will be throttled at the RespOrg Level with a rate limit of 12000 requests/minute per RespOrg in Production and 3000 requests/minute per RespOrg in Developer Portal environment.
 *
 * OpenAPI spec version: v1
 * Contact: productsupport@somos.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TfnrApIs);
  }
}(this, function(expect, TfnrApIs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TfnrApIs.PermRecord();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PermRecord', function() {
    it('should create an instance of PermRecord', function() {
      // uncomment below and update the code to test PermRecord
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be.a(TfnrApIs.PermRecord);
    });

    it('should have the property usrName (base name: "usrName")', function() {
      // uncomment below and update the code to test the property usrName
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property usrPhone (base name: "usrPhone")', function() {
      // uncomment below and update the code to test the property usrPhone
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property respOrgId (base name: "respOrgId")', function() {
      // uncomment below and update the code to test the property respOrgId
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property updList (base name: "updList")', function() {
      // uncomment below and update the code to test the property updList
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property viewList (base name: "viewList")', function() {
      // uncomment below and update the code to test the property viewList
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property usrClass (base name: "usrClass")', function() {
      // uncomment below and update the code to test the property usrClass
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property usrGrp (base name: "usrGrp")', function() {
      // uncomment below and update the code to test the property usrGrp
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property maxLogonAttempts (base name: "maxLogonAttempts")', function() {
      // uncomment below and update the code to test the property maxLogonAttempts
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property tmoutInt (base name: "tmoutInt")', function() {
      // uncomment below and update the code to test the property tmoutInt
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property telcoCode (base name: "telcoCode")', function() {
      // uncomment below and update the code to test the property telcoCode
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property autoFlag (base name: "autoFlag")', function() {
      // uncomment below and update the code to test the property autoFlag
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property fccFlag (base name: "fccFlag")', function() {
      // uncomment below and update the code to test the property fccFlag
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nusPerm (base name: "nusPerm")', function() {
      // uncomment below and update the code to test the property nusPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cadPerm (base name: "cadPerm")', function() {
      // uncomment below and update the code to test the property cadPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cprPerm (base name: "cprPerm")', function() {
      // uncomment below and update the code to test the property cprPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property ladPerm (base name: "ladPerm")', function() {
      // uncomment below and update the code to test the property ladPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property trqPerm (base name: "trqPerm")', function() {
      // uncomment below and update the code to test the property trqPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property aosPerm (base name: "aosPerm")', function() {
      // uncomment below and update the code to test the property aosPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property craPerm (base name: "craPerm")', function() {
      // uncomment below and update the code to test the property craPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property crrPerm (base name: "crrPerm")', function() {
      // uncomment below and update the code to test the property crrPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property npaPerm (base name: "npaPerm")', function() {
      // uncomment below and update the code to test the property npaPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property eagPerm (base name: "eagPerm")', function() {
      // uncomment below and update the code to test the property eagPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property orgPerm (base name: "orgPerm")', function() {
      // uncomment below and update the code to test the property orgPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property andPerm (base name: "andPerm")', function() {
      // uncomment below and update the code to test the property andPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property relPerm (base name: "relPerm")', function() {
      // uncomment below and update the code to test the property relPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nxxPerm (base name: "nxxPerm")', function() {
      // uncomment below and update the code to test the property nxxPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property orcPerm (base name: "orcPerm")', function() {
      // uncomment below and update the code to test the property orcPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property arpPerm (base name: "arpPerm")', function() {
      // uncomment below and update the code to test the property arpPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cagPerm (base name: "cagPerm")', function() {
      // uncomment below and update the code to test the property cagPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property carPerm (base name: "carPerm")', function() {
      // uncomment below and update the code to test the property carPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property csePerm (base name: "csePerm")', function() {
      // uncomment below and update the code to test the property csePerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property claPerm (base name: "claPerm")', function() {
      // uncomment below and update the code to test the property claPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property dapPerm (base name: "dapPerm")', function() {
      // uncomment below and update the code to test the property dapPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property eapPerm (base name: "eapPerm")', function() {
      // uncomment below and update the code to test the property eapPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property enoPerm (base name: "enoPerm")', function() {
      // uncomment below and update the code to test the property enoPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property gnaPerm (base name: "gnaPerm")', function() {
      // uncomment below and update the code to test the property gnaPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nofPerm (base name: "nofPerm")', function() {
      // uncomment below and update the code to test the property nofPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property rocPerm (base name: "rocPerm")', function() {
      // uncomment below and update the code to test the property rocPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property sapPerm (base name: "sapPerm")', function() {
      // uncomment below and update the code to test the property sapPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cciPerm (base name: "cciPerm")', function() {
      // uncomment below and update the code to test the property cciPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property ncoPerm (base name: "ncoPerm")', function() {
      // uncomment below and update the code to test the property ncoPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nmvPerm (base name: "nmvPerm")', function() {
      // uncomment below and update the code to test the property nmvPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nxlPerm (base name: "nxlPerm")', function() {
      // uncomment below and update the code to test the property nxlPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property roiPerm (base name: "roiPerm")', function() {
      // uncomment below and update the code to test the property roiPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property bbmPerm (base name: "bbmPerm")', function() {
      // uncomment below and update the code to test the property bbmPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property srcPerm (base name: "srcPerm")', function() {
      // uncomment below and update the code to test the property srcPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property gsaPerm (base name: "gsaPerm")', function() {
      // uncomment below and update the code to test the property gsaPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property secPerm (base name: "secPerm")', function() {
      // uncomment below and update the code to test the property secPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property sudPerm (base name: "sudPerm")', function() {
      // uncomment below and update the code to test the property sudPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property sepPerm (base name: "sepPerm")', function() {
      // uncomment below and update the code to test the property sepPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property stdPerm (base name: "stdPerm")', function() {
      // uncomment below and update the code to test the property stdPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property ducPerm (base name: "ducPerm")', function() {
      // uncomment below and update the code to test the property ducPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nucPerm (base name: "nucPerm")', function() {
      // uncomment below and update the code to test the property nucPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property casPerm (base name: "casPerm")', function() {
      // uncomment below and update the code to test the property casPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property ddtPerm (base name: "ddtPerm")', function() {
      // uncomment below and update the code to test the property ddtPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property prtPerm (base name: "prtPerm")', function() {
      // uncomment below and update the code to test the property prtPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property tcoPerm (base name: "tcoPerm")', function() {
      // uncomment below and update the code to test the property tcoPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property lcnPerm (base name: "lcnPerm")', function() {
      // uncomment below and update the code to test the property lcnPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property lrnPerm (base name: "lrnPerm")', function() {
      // uncomment below and update the code to test the property lrnPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property ncnPerm (base name: "ncnPerm")', function() {
      // uncomment below and update the code to test the property ncnPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property netPerm (base name: "netPerm")', function() {
      // uncomment below and update the code to test the property netPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nrnPerm (base name: "nrnPerm")', function() {
      // uncomment below and update the code to test the property nrnPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property matPerm (base name: "matPerm")', function() {
      // uncomment below and update the code to test the property matPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property sidPerm (base name: "sidPerm")', function() {
      // uncomment below and update the code to test the property sidPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property sspPerm (base name: "sspPerm")', function() {
      // uncomment below and update the code to test the property sspPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cosPerm (base name: "cosPerm")', function() {
      // uncomment below and update the code to test the property cosPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cpnPerm (base name: "cpnPerm")', function() {
      // uncomment below and update the code to test the property cpnPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property prcPerm (base name: "prcPerm")', function() {
      // uncomment below and update the code to test the property prcPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property prlPerm (base name: "prlPerm")', function() {
      // uncomment below and update the code to test the property prlPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nrcPerm (base name: "nrcPerm")', function() {
      // uncomment below and update the code to test the property nrcPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nrlPerm (base name: "nrlPerm")', function() {
      // uncomment below and update the code to test the property nrlPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property spsPerm (base name: "spsPerm")', function() {
      // uncomment below and update the code to test the property spsPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property ganPerm (base name: "ganPerm")', function() {
      // uncomment below and update the code to test the property ganPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property gunPerm (base name: "gunPerm")', function() {
      // uncomment below and update the code to test the property gunPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property spoPerm (base name: "spoPerm")', function() {
      // uncomment below and update the code to test the property spoPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cpsPerm (base name: "cpsPerm")', function() {
      // uncomment below and update the code to test the property cpsPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property recPerm (base name: "recPerm")', function() {
      // uncomment below and update the code to test the property recPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property airPerm (base name: "airPerm")', function() {
      // uncomment below and update the code to test the property airPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cirPerm (base name: "cirPerm")', function() {
      // uncomment below and update the code to test the property cirPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property hpuPerm (base name: "hpuPerm")', function() {
      // uncomment below and update the code to test the property hpuPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property ocnPerm (base name: "ocnPerm")', function() {
      // uncomment below and update the code to test the property ocnPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property clePerm (base name: "clePerm")', function() {
      // uncomment below and update the code to test the property clePerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nccPerm (base name: "nccPerm")', function() {
      // uncomment below and update the code to test the property nccPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nlaPerm (base name: "nlaPerm")', function() {
      // uncomment below and update the code to test the property nlaPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nlePerm (base name: "nlePerm")', function() {
      // uncomment below and update the code to test the property nlePerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property ncaPerm (base name: "ncaPerm")', function() {
      // uncomment below and update the code to test the property ncaPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property racPerm (base name: "racPerm")', function() {
      // uncomment below and update the code to test the property racPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property rdcPerm (base name: "rdcPerm")', function() {
      // uncomment below and update the code to test the property rdcPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property enaPerm (base name: "enaPerm")', function() {
      // uncomment below and update the code to test the property enaPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property crsPerm (base name: "crsPerm")', function() {
      // uncomment below and update the code to test the property crsPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property crbPerm (base name: "crbPerm")', function() {
      // uncomment below and update the code to test the property crbPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property nacPerm (base name: "nacPerm")', function() {
      // uncomment below and update the code to test the property nacPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property cpfPerm (base name: "cpfPerm")', function() {
      // uncomment below and update the code to test the property cpfPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property rmsPerm (base name: "rmsPerm")', function() {
      // uncomment below and update the code to test the property rmsPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property wraPerm (base name: "wraPerm")', function() {
      // uncomment below and update the code to test the property wraPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property luiPerm (base name: "luiPerm")', function() {
      // uncomment below and update the code to test the property luiPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property padPerm (base name: "padPerm")', function() {
      // uncomment below and update the code to test the property padPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property tadPerm (base name: "tadPerm")', function() {
      // uncomment below and update the code to test the property tadPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property talPerm (base name: "talPerm")', function() {
      // uncomment below and update the code to test the property talPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property tecPerm (base name: "tecPerm")', function() {
      // uncomment below and update the code to test the property tecPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

    it('should have the property trlPerm (base name: "trlPerm")', function() {
      // uncomment below and update the code to test the property trlPerm
      //var instane = new TfnrApIs.PermRecord();
      //expect(instance).to.be();
    });

  });

}));
